{"version":3,"file":"ActorOptimizeQueryOperationSetSeedSourcesQuadpatternIris.js","sourceRoot":"","sources":["ActorOptimizeQueryOperationSetSeedSourcesQuadpatternIris.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  IActionOptimizeQueryOperation,\n  IActorOptimizeQueryOperationOutput,\n} from '@comunica/bus-optimize-query-operation';\nimport { ActorOptimizeQueryOperation } from '@comunica/bus-optimize-query-operation';\nimport { KeysRdfResolveQuadPattern } from '@comunica/context-entries';\nimport type { IActorArgs, IActorTest } from '@comunica/core';\nimport type { DataSources } from '@comunica/types';\nimport { Algebra, Util } from 'sparqlalgebrajs';\n\n/**\n * A comunica Set Seed Sources Quadpattern IRIs Optimize Query Operation Actor.\n */\nexport class ActorOptimizeQueryOperationSetSeedSourcesQuadpatternIris extends ActorOptimizeQueryOperation {\n  private readonly extractSubjects: boolean;\n  private readonly extractPredicates: boolean;\n  private readonly extractObjects: boolean;\n  private readonly extractGraphs: boolean;\n  private readonly extractVocabIris: boolean;\n\n  public constructor(args: IActorOptimizeQueryOperationSetSeedSourcesQuadpatternIrisArgs) {\n    super(args);\n  }\n\n  public async test(action: IActionOptimizeQueryOperation): Promise<IActorTest> {\n    return true;\n  }\n\n  public async run(action: IActionOptimizeQueryOperation): Promise<IActorOptimizeQueryOperationOutput> {\n    const contextSources: DataSources | undefined = action.context.get(KeysRdfResolveQuadPattern.sources);\n    if (!contextSources || contextSources.length === 0) {\n      const sources: string[] = [ ...new Set(this.extractIrisFromOperation(action.operation)) ];\n      action.context = action.context.set(KeysRdfResolveQuadPattern.sources, sources);\n    }\n    return { ...action, context: action.context };\n  }\n\n  public extractIrisFromOperation(operation: Algebra.Operation): string[] {\n    const iris: string[] = [];\n    Util.recurseOperation(operation, {\n      [Algebra.types.PATH]: path => {\n        if (this.extractSubjects && path.subject.termType === 'NamedNode') {\n          iris.push(path.subject.value);\n        }\n        // Predicates are ignored\n        if (this.extractObjects && path.object.termType === 'NamedNode') {\n          iris.push(path.object.value);\n        }\n        if (this.extractGraphs && path.graph.termType === 'NamedNode') {\n          iris.push(path.graph.value);\n        }\n        return false;\n      },\n      [Algebra.types.PATTERN]: pattern => {\n        if (this.extractSubjects && pattern.subject.termType === 'NamedNode') {\n          iris.push(pattern.subject.value);\n        }\n        if (this.extractPredicates && pattern.predicate.termType === 'NamedNode') {\n          iris.push(pattern.predicate.value);\n        }\n        if (this.extractObjects && pattern.object.termType === 'NamedNode' &&\n          (this.extractVocabIris || pattern.predicate.value !== 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type')) {\n          iris.push(pattern.object.value);\n        }\n        if (this.extractGraphs && pattern.graph.termType === 'NamedNode') {\n          iris.push(pattern.graph.value);\n        }\n        return false;\n      },\n    });\n    return iris;\n  }\n}\n\nexport interface IActorOptimizeQueryOperationSetSeedSourcesQuadpatternIrisArgs\n  extends IActorArgs<IActionOptimizeQueryOperation, IActorTest, IActorOptimizeQueryOperationOutput> {\n  /**\n   * If IRIs should be extracted from subject positions.\n   * @default {true}\n   */\n  extractSubjects: boolean;\n  /**\n   * If IRIs should be extracted from predicate positions.\n   * @default {false}\n   */\n  extractPredicates: boolean;\n  /**\n   * If IRIs should be extracted from object positions.\n   * @default {true}\n   */\n  extractObjects: boolean;\n  /**\n   * If IRIs should be extracted from graph positions.\n   * @default {true}\n   */\n  extractGraphs: boolean;\n  /**\n   * If object IRIs should be extracted if the predicate is rdf:type.\n   * @default {false}\n   */\n  extractVocabIris: boolean;\n}\n"]}