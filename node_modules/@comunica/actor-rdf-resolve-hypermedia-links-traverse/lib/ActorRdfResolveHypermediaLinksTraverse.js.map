{"version":3,"file":"ActorRdfResolveHypermediaLinksTraverse.js","sourceRoot":"","sources":["ActorRdfResolveHypermediaLinksTraverse.ts"],"names":[],"mappings":";;;AAEA,iGAA4F;AAC5F,+DAA0D;AAC1D,6FAAyF;AAGzF;;GAEG;AACH,MAAa,sCAAuC,SAAQ,iEAA8B;IAGxF,YACE,IAA6C;QAE7C,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,iCAAiC;QACjC,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,uBAAuB,CAAC;IAC9D,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,MAAwC;QACxD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE;YAC7B,MAAM,IAAI,KAAK,CAAC,SAAS,IAAI,CAAC,IAAI,wCAAwC,CAAC,CAAC;SAC7E;QACD,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,8DAA6B,CAAC,QAAQ,CAAC;YAC5D,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,8DAA6B,CAAC,QAAQ,CAAC,EAAE;YAC7D,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;SACtE;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAwC;QACvD,OAAO;YACL,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAe,EAAE,EAAE;gBACtD,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAC/C,IAAI,YAAY,IAAI,CAAC,EAAE;oBACrB,QAAQ,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;iBACpD;gBACD,wDAAwD;gBACxD,2DAA2D;gBAC3D,gCAAgC;gBAChC,IAAI,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC;oBAClC,CAAC,IAAI,CAAC,uBAAuB;wBAC3B,CAAC,MAAM,CAAC,MAAM;4BACZ,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,KAAK,QAAQ;4BAC5C,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,+BAAa,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;oBAC3D,uCAAuC;oBACvC,QAAQ,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;iBACxD;gBACD,OAAO,QAAQ,CAAC;YAClB,CAAC,CAAC;SACH,CAAC;IACJ,CAAC;CACF;AA5CD,wFA4CC","sourcesContent":["import type { IActionRdfResolveHypermediaLinks,\n  IActorRdfResolveHypermediaLinksOutput, ILink } from '@comunica/bus-rdf-resolve-hypermedia-links';\nimport { ActorRdfResolveHypermediaLinks } from '@comunica/bus-rdf-resolve-hypermedia-links';\nimport { KeysHttpProxy } from '@comunica/context-entries';\nimport { KeysRdfResolveHypermediaLinks } from '@comunica/context-entries-link-traversal';\nimport type { IActorArgs, IActorTest } from '@comunica/core';\n\n/**\n * A comunica Traverse RDF Resolve Hypermedia Links Actor.\n */\nexport class ActorRdfResolveHypermediaLinksTraverse extends ActorRdfResolveHypermediaLinks {\n  private readonly upgradeInsecureRequests: boolean | undefined;\n\n  public constructor(\n    args: IActorRdfResolveHypermediaLinksTraverse,\n  ) {\n    super(args);\n    // Overrides recommended settings\n    this.upgradeInsecureRequests = args.upgradeInsecureRequests;\n  }\n\n  public async test(action: IActionRdfResolveHypermediaLinks): Promise<IActorTest> {\n    if (!action.metadata.traverse) {\n      throw new Error(`Actor ${this.name} requires a 'traverse' metadata entry.`);\n    }\n    if (action.context.has(KeysRdfResolveHypermediaLinks.traverse) &&\n      !action.context.get(KeysRdfResolveHypermediaLinks.traverse)) {\n      throw new Error(`Link traversal has been disabled via the context.`);\n    }\n    return true;\n  }\n\n  public async run(action: IActionRdfResolveHypermediaLinks): Promise<IActorRdfResolveHypermediaLinksOutput> {\n    return {\n      links: action.metadata.traverse.map((fileLink: ILink) => {\n        const hashPosition = fileLink.url.indexOf('#');\n        if (hashPosition >= 0) {\n          fileLink.url = fileLink.url.slice(0, hashPosition);\n        }\n        // Prioritize the upgradeInsecureRequests option setting\n        // default to true when using the browser in https and when\n        // there is no httpProxyHandler.\n        if (fileLink.url.startsWith('http:') &&\n          (this.upgradeInsecureRequests ??\n            (global.window &&\n              global.window.location.protocol === 'https:' &&\n              !action.context.get(KeysHttpProxy.httpProxyHandler)))) {\n          // Avoid mixed content when using https\n          fileLink.url = fileLink.url.replace('http:', 'https:');\n        }\n        return fileLink;\n      }),\n    };\n  }\n}\n\nexport interface IActorRdfResolveHypermediaLinksTraverse extends IActorArgs<\nIActionRdfResolveHypermediaLinks, IActorTest, IActorRdfResolveHypermediaLinksOutput\n> {\n  /**\n   * Upgrade insecure http requests to https when performing\n   * link traversal. This setting will override the recommended\n   * settings in a secure browser context.\n   */\n  upgradeInsecureRequests?: boolean;\n}\n"]}