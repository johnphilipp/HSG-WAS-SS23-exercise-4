"use strict";
/**
 * Inspired from
 * https://github.com/TREEcg/tree-metadata-extraction/blob/42be38925cf6a033ddadaca5ecce929902ef1545/src/util/Util.ts
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeNodes = exports.RelationOperator = void 0;
// Reference
// https://treecg.github.io/specification/#vocabulary
var RelationOperator;
(function (RelationOperator) {
    //  All elements in the related node have this prefix
    RelationOperator["PrefixRelation"] = "https://w3id.org/tree#PrefixRelation";
    //  All elements in the related node have this substring
    RelationOperator["SubstringRelation"] = "https://w3id.org/tree#SubstringRelation";
    //  All members of this related node end with this suffix
    RelationOperator["SuffixRelation"] = "https://w3id.org/tree#SuffixRelation";
    // The related Nodeâ€™s members are greater than the value. For string comparison,
    // this relation can refer to a comparison configuration
    RelationOperator["GreaterThanRelation"] = "https://w3id.org/tree#GreaterThanRelation";
    // Similar to GreaterThanRelation
    RelationOperator["GreaterThanOrEqualToRelation"] = "https://w3id.org/tree#GreaterThanOrEqualToRelation";
    // Similar to GreaterThanRelation
    RelationOperator["LessThanRelation"] = "https://w3id.org/tree#LessThanRelation";
    // Similar to GreaterThanRelation
    RelationOperator["LessThanOrEqualToRelation"] = "https://w3id.org/tree#LessThanOrEqualToRelation";
    // Similar to GreaterThanRelation
    RelationOperator["EqualThanRelation"] = "https://w3id.org/tree#EqualThanRelation";
    // A contains b iff no points of b lie in the exterior of a, and at least one point
    // of the interior of b lies in the interior of a
    // reference http://lin-ear-th-inking.blogspot.com/2007/06/subtleties-of-ogc-covers-spatial.html
    RelationOperator["GeospatiallyContainsRelation"] = "https://w3id.org/tree#GeospatiallyContainsRelation";
})(RelationOperator = exports.RelationOperator || (exports.RelationOperator = {}));
// Reference
// https://treecg.github.io/specification/#classes
// https://treecg.github.io/specification/#properties
var TreeNodes;
(function (TreeNodes) {
    // A tree:Node is a node that may contain links to other dereferenceable resources
    // that lead to a full overview of a tree:Collection.
    TreeNodes["Node"] = "https://w3id.org/tree#node";
    // An entity that describes a relation between two tree:Nodes.
    TreeNodes["Relation"] = "https://w3id.org/tree#relation";
    // The relation operator type describe by the enum RelationOperator
    TreeNodes["RDFTypeNode"] = "http://www.w3.org/1999/02/22-rdf-syntax-ns#type";
    // A property path, as defined by SHACL, that indicates what resource the tree:value affects.
    // reference SHACL: https://www.w3.org/TR/shacl/
    TreeNodes["Path"] = "https://w3id.org/tree#path";
    // The contextual value of this node
    TreeNodes["Value"] = "https://w3id.org/tree#value";
    // Remaining number of items of this node, the items in its children included.
    TreeNodes["RemainingItems"] = "https://w3id.org/tree#remainingItems";
})(TreeNodes = exports.TreeNodes || (exports.TreeNodes = {}));
//# sourceMappingURL=TreeMetadata.js.map